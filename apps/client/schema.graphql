"""
Cursor for paging through collections
"""
scalar ConnectionCursor

input CreateManyReferendumsInput {
  """
  Array of records to create
  """
  referendums: [CreateReferendum!]!
}

input CreateManyUsersInput {
  """
  Array of records to create
  """
  users: [CreateUser!]!
}

input CreateOneReferendumInput {
  """
  The record to create
  """
  referendum: CreateReferendum!
}

input CreateOneUserInput {
  """
  The record to create
  """
  user: CreateUser!
}

input CreateReferendum {
  """
  referendum answer kind
  """
  answerKind: ReferendumAnswerKind!
  answers: [String!]! = []
  description: String
  endDate: DateTime!
  name: String!
  participantsExternalIds: [String!]! = []

  """
  referendum participants
  """
  participantsKind: ReferendumParticipantsKind!
  participantsRoles: [String!]! = []
  question: String!
  slug: String!

  """
  starting date
  """
  startDate: DateTime! = "2023-09-03T07:30:35.182Z"
}

input CreateUser {
  email: String!
  externalId: String!
  name: String!
}

input CursorPaging {
  """
  Paginate after opaque cursor
  """
  after: ConnectionCursor

  """
  Paginate before opaque cursor
  """
  before: ConnectionCursor

  """
  Paginate first
  """
  first: Int

  """
  Paginate last
  """
  last: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyReferendumsInput {
  """
  Filter to find records to delete
  """
  filter: ReferendumDeleteFilter!
}

type DeleteManyResponse {
  """
  The number of records deleted.
  """
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """
  Filter to find records to delete
  """
  filter: UserDeleteFilter!
}

input DeleteOneReferendumInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input DeleteOneUserInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  createManyReferendums(input: CreateManyReferendumsInput!): [Referendum!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneReferendum(input: CreateOneReferendumInput!): Referendum!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyReferendums(input: DeleteManyReferendumsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneReferendum(input: DeleteOneReferendumInput!): ReferendumDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  updateManyReferendums(input: UpdateManyReferendumsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneReferendum(input: UpdateOneReferendumInput!): Referendum!
  updateOneUser(input: UpdateOneUserInput!): User!
}

type PageInfo {
  """
  The cursor of the last returned record.
  """
  endCursor: ConnectionCursor

  """
  true if paging forward and there are more records.
  """
  hasNextPage: Boolean

  """
  true if paging backwards and there are more records.
  """
  hasPreviousPage: Boolean

  """
  The cursor of the first returned record.
  """
  startCursor: ConnectionCursor
}

type Query {
  referendum(
    """
    The id of the record to find.
    """
    id: ID!
  ): Referendum!
  referendums(
    """
    Specify to filter the records returned.
    """
    filter: ReferendumFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [ReferendumSort!]! = []
  ): ReferendumConnection!
  user(
    """
    The id of the record to find.
    """
    id: ID!
  ): User!
  users(
    """
    Specify to filter the records returned.
    """
    filter: UserFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [UserSort!]! = []
  ): UserConnection!
}

type Referendum {
  """
  referendum answer kind
  """
  answerKind: ReferendumAnswerKind!
  answers: [String!]!
  createdAt: DateTime!
  description: String
  endDate: DateTime!
  finalVote: String
  id: ID!
  name: String!
  participantsExternalIds: [String!]!

  """
  referendum participants kind
  """
  participantsKind: ReferendumParticipantsKind
  participantsRoles: [String!]!
  question: String!
  slug: String!
  startDate: DateTime
  status: ReferendumStatus!
  updatedAt: DateTime!
}

enum ReferendumAnswerKind {
  Multiple
  YesNo
}

type ReferendumConnection {
  """
  Array of edges.
  """
  edges: [ReferendumEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input ReferendumDeleteFilter {
  and: [ReferendumDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ReferendumDeleteFilter!]
  slug: StringFieldComparison
}

type ReferendumDeleteResponse {
  """
  referendum answer kind
  """
  answerKind: ReferendumAnswerKind
  answers: [String!]
  createdAt: DateTime
  description: String
  endDate: DateTime
  finalVote: String
  id: ID
  name: String
  participantsExternalIds: [String!]

  """
  referendum participants kind
  """
  participantsKind: ReferendumParticipantsKind
  participantsRoles: [String!]
  question: String
  slug: String
  startDate: DateTime
  status: ReferendumStatus
  updatedAt: DateTime
}

type ReferendumEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the Referendum
  """
  node: Referendum!
}

input ReferendumFilter {
  and: [ReferendumFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ReferendumFilter!]
  slug: StringFieldComparison
}

enum ReferendumParticipantsKind {
  All
  ByEmail
  ByRole
}

input ReferendumSort {
  direction: SortDirection!
  field: ReferendumSortFields!
  nulls: SortNulls
}

enum ReferendumSortFields {
  id
  name
  slug
}

enum ReferendumStatus {
  Closed
  InProgress
  NoStarted
}

input ReferendumUpdateFilter {
  and: [ReferendumUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ReferendumUpdateFilter!]
  slug: StringFieldComparison
}

"""
Sort Directions
"""
enum SortDirection {
  ASC
  DESC
}

"""
Sort Nulls Options
"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateManyReferendumsInput {
  """
  Filter used to find fields to update
  """
  filter: ReferendumUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateReferendum!
}

type UpdateManyResponse {
  """
  The number of records updated.
  """
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """
  Filter used to find fields to update
  """
  filter: UserUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateUser!
}

input UpdateOneReferendumInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateReferendum!
}

input UpdateOneUserInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateUser!
}

input UpdateReferendum {
  """
  referendum answer kind
  """
  answerKind: ReferendumAnswerKind
  answers: [String!] = []
  createdAt: DateTime
  description: String
  endDate: DateTime
  finalVote: String
  id: ID
  name: String
  participantsExternalIds: [String!] = []

  """
  referendum participants kind
  """
  participantsKind: ReferendumParticipantsKind = All
  participantsRoles: [String!] = []
  question: String
  slug: String
  startDate: DateTime
  status: ReferendumStatus
  updatedAt: DateTime
}

input UpdateUser {
  createdAt: DateTime
  email: String
  externalId: String
  id: ID
  name: String
  updatedAt: DateTime
}

type User {
  createdAt: DateTime!
  email: String!
  externalId: String!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type UserConnection {
  """
  Array of edges.
  """
  edges: [UserEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
}

type UserDeleteResponse {
  createdAt: DateTime
  email: String
  externalId: String
  id: ID
  name: String
  updatedAt: DateTime
}

type UserEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the User
  """
  node: User!
}

input UserFilter {
  and: [UserFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserFilter!]
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  email
  id
  name
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
}
